################################################################################
#                                VHDL SNIPPETS                                 #
################################################################################

### Libraries ##################################################################

# Generic Library
snippet lib
library ${1:ieee};
use $1.${2:std_logic_1164}.${3:all};
endsnippet

# Standard Libraries
snippet libs
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
endsnippet

# Xilinx Library
snippet libx
library unisim;
use unisim.vcomponents.all;
endsnippet

### Entity Declarations ########################################################

# Standard Entity
snippet ent
entity ${1} is
	port (
		${2}
	);
end entity; -- $1
endsnippet

# Generic Entity
snippet gent
entity ${1:myentity} is
	generic (
		${2}
	);
	port (
		${3}
	);
end entity; -- $1
endsnippet

### Architecture ###############################################################

# Standard Architecture
snippet arch
architecture ${1} of ${2} is

	${3}

begin

	${4}

end architecture; -- $1
endsnippet

# Mixed Entity - Architecture
snippet entarch
entity ${1} is
	port (
		${2}
	);
end entity; -- $1


architecture ${3} of $1 is

	${4}

begin

	${5}

end architecture; -- $3
endsnippet

# Mixed Generic Entity - Architecture
snippet gentarch
entity ${1} is
	generic (
		${2}
	);
	port (
		${3}
	);
end entity; -- $1


architecture ${4} of $1 is

	${5}

begin

	${6}

end architecture; -- $4
endsnippet
### Declarations ###############################################################

# std_logic
snippet sl
std_logic
endsnippet

snippet isl
in  std_logic;
endsnippet

snippet osl
out std_logic;
endsnippet

snippet iosl
inout std_logic;
endsnippet

# std_logic_vector
snippet slv
std_logic_vector (${1} downto ${2:0})
endsnippet

snippet islv
in  std_logic_vector (${1} downto ${2:0});
endsnippet

snippet oslv
out std_logic_vector (${1} downto ${2:0});
endsnippet

snippet ioslv
inout std_logic_vector (${1} downto ${2:0});
endsnippet

# unsigned
snippet un
unsigned (${1} downto ${2:0})
endsnippet

# signed
snippet sig
signed (${1} downto ${2:0})
endsnippet

# natural
snippet nat
natural := ${1:32}
endsnippet

# integer
snippet int
integer := ${1:32}
endsnippet

### Instantiation ##############################################################

snippet pm
port map (${1});

endsnippet

snippet gm
generic map (${1})
port map (
	${2}
);

endsnippet

## Process Statements #########################################################

# process
snippet pro
process (${1})
begin
	${2}
end process;
endsnippet

# process with clock
snippet cpro
process (${1:clk})
begin
	if $1 = '${2:1}' and $1'event then
		${3}
	end if;
end process;
endsnippet

# asynchronous process
snippet apro
process (${1:all})
begin
	${2}
end process;
endsnippet

# labeled process
snippet lpro
${1:label} : process (${2})
begin
	${3}
end process; -- $1
endsnippet

# labeled clocked process
snippet lcpro
${1:label} : process (${2:clk})
begin
	if $2 = '${3:1}' and $2'event then
		${4}
	end if;
end process; -- $1
endsnippet

# labeled asynchronous process
snippet lapro
${1:label} : process (${2:all})
begin
	${3}
end process; -- $1
endsnippet

### Control Statements #########################################################

# if
snippet if
if ${1} then
	${2}
end if;
endsnippet

# if-else
snippet ifel
if ${1} then
	${2}
else
	${3}
end if;
endsnippet

# if-elsif-else
snippet ifelel
if ${1} then
	${2}
elsif ${3} then
	${4}
else
	${5}
end if;
endsnippet

# case
snippet case
case ${1} is
	when ${2} =>
		${3}
end case;
endsnippet

# when
snippet when
when ${1} =>
	${2}
endsnippet

# for
snippet for
for ${1:i} in ${2:0} ${3:to} ${4:n-1} loop
	${5}
end loop;
endsnippet

snippet forgen
${1:label} : for ${2:i} in ${3:0} ${4:to} ${5:n-1} generate
	${6}
end generate; -- $1
endsnippet

# while
snippet while
while ${1} loop
	${2}
end loop;
endsnippet

### Function ###################################################################

# function
snippet func
function ${1:myfunc} (${2:params}) return ${3:type} is
	${4:-- Variables}
begin
	${5:-- Code}
end function; -- $1
endsnippet

### Package ####################################################################

# package
snippet pack
package ${1:mypack} is
	${2}
end; -- $1
endsnippet

### Misc #######################################################################

# others
snippet oth
(others => '${1:0}')
endsnippet

# type
snippet type
type ${1:mytype} is
endsnippet

# array
snippet arr
array (${1:N-1} ${2:downto} ${3:0})
endsnippet

# variable
snippet var
variable ${1:myvar} : ${2:integer};
endsnippet

# variable default
snippet vard
variable ${1:myvar} : ${2:integer} := ${3:0};
endsnippet

# signal
snippet sign
signal ${1:mysignal} : ${2:type};
endsnippet

# signal default
snippet signd
signal ${1:mysignal} : ${2:type} := ${3:(others => '0')};
endsnippet

# constant
snippet const
constant ${1:myconst} : ${2:type} := ${3:0};
endsnippet

# increment
snippet incr
${1:i} ${2::}= $1 + 1;
endsnippet

